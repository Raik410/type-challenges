import { Octokit } from '@octokit/core';
import * as _octokit_types from '@octokit/types';
import { Endpoints } from '@octokit/types';
import { getOctokit } from '@actions/github';

declare type TreeParameter = Endpoints['POST /repos/{owner}/{repo}/git/trees']['parameters']['tree'];
interface CommitOptions {
    owner: string;
    repo: string;
    head: string;
    base: string;
    createWhenEmpty?: boolean;
    changes: Changes | Changes[];
    fresh?: boolean;
}
interface PullRequestOptions {
    title: string;
    body: string;
    owner: string;
    repo: string;
    head: string;
    base: string;
    labels?: string[];
}
interface Changes {
    files?: Record<string, string | File | UpdateFunction>;
    emptyCommit?: boolean | string;
    commit: string;
    author?: {
        name?: string;
        email?: string;
    };
}
interface File {
    content: string;
    encoding: 'utf-8' | 'base64';
}
declare type UpdateFunctionFile = {
    exists: true;
    size: number;
    encoding: 'base64';
    content: string;
} | {
    exists: false;
    size: never;
    encoding: never;
    content: never;
};
declare type UpdateFunction = (file: UpdateFunctionFile) => string | File | null;
interface State {
    octokit: Octokit;
    owner: string;
    repo: string;
    latestCommitSha?: string;
    latestCommitTreeSha?: string;
    treeSha?: string;
}

declare type Github = ReturnType<typeof getOctokit>;
declare function PushCommit(octokit: Github, { owner, repo, base, head, createWhenEmpty, changes: changesOption, fresh, }: CommitOptions): Promise<State | null>;
declare function CreatePullRequest(octokit: Octokit, { owner, repo, title, body, base, head, labels, }: PullRequestOptions): Promise<_octokit_types.OctokitResponse<any, number>>;

export { Changes, CommitOptions, CreatePullRequest, File, Github, PullRequestOptions, PushCommit, State, TreeParameter, UpdateFunction, UpdateFunctionFile };
